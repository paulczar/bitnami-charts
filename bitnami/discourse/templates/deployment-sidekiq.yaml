{{- if and (include "discourse.host" .) (.Values.postgresql.enabled) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "discourse.fullname" . }}-sidekiq
  labels:
    {{- include "discourse.labels" . | nindent 4 }}
    component: sidekiq
spec:
  replicas: {{ .Values.replicaCount.sidekiq }}
  selector:
    matchLabels:
      {{- include "discourse.selectorLabels" . | nindent 6 }}
      component: sidekiq
  template:
    metadata:
      labels:
        {{- include "discourse.selectorLabels" . | nindent 8 }}
        component: sidekiq
    spec:
      {{- include "discourse.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "discourse.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: sidekiq
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: {{ template "discourse.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command: ["/app-entrypoint.sh"]
          args:
            - nami
            - start
            - --foreground
            - discourse-sidekiq
          env:
            - name: DISCOURSE_HOST
              value: {{ include "discourse.fullname" . }}
            - name: DISCOURSE_PORT
              value: "3000"
            - name: DISCOURSE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "discourse.fullname" . }}
                  key: discourse-password
            - name: DISCOURSE_POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "discourse.fullname" . }}
                  key: discourse-postgresql-password
            - name: POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "discourse.fullname" . }}
                  key: postgresql-client-create-database-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "discourse.fullname" . }}
                  key: redis-password
            - configMapRef:
                name: {{ include "discourse.fullname" . }}
            {{- if .Values.extraEnvVars.discourse }}
            {{- tpl (toYaml .Values.extraEnvVars.discourse) $ | nindent 12 }}
            {{- end }}
            {{- if or .Values.extraEnvVarsCM.discourse .Values.extraEnvVarsSecret.discourse }}
            envFrom:
            {{- if .Values.extraEnvVarsCM.discourse }}
            - configMapRef:
                name: {{ .Values.extraEnvVarsCM.discourse }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret.discourse }}
            - secretRef:
                name: {{ .Values.extraEnvVarsSecret.discourse }}
            {{- end }}
            {{- end }}
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          readinessProbe:
            exec:
              command: [nami status discourse-sidekiqa]
            initialDelaySeconds: 60
            periodSeconds: 60
          resources: {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
{{- end -}}
